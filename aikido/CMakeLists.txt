cmake_minimum_required(VERSION 2.8.11)

# Use MACOSX_RPATH by default on OS X. This was added in CMake 2.8.12 and
# became default in CMake 3.0. Explicitly setting this policy is necessary to
# suppress a warning in CMake 3.0 and above.
if(POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif()

project(aikido)

list(INSERT CMAKE_MODULE_PATH 0 "${PROJECT_SOURCE_DIR}/cmake") 

#==============================================================================
# Configuration Options
#

set(INCLUDE_INSTALL_DIR "include")
set(LIBRARY_INSTALL_DIR "lib")
set(CONFIG_INSTALL_DIR "${LIBRARY_INSTALL_DIR}/${PROJECT_NAME}/cmake")

option(COVERALLS "Enagle coveralls support" OFF)
option(COVERALLS_UPLOAD "Upload coveralls JSON output" ON)

# Enable coveralls. This must appear before any targets are created.
if(COVERALLS)
  include(Coveralls)
  coveralls_turn_on_coverage()
endif()

#==============================================================================
# Required Dependencies
#
find_package(Boost REQUIRED COMPONENTS filesystem)
include_directories(SYSTEM ${Boost_INCLUDE_DIRS})

find_package(DART REQUIRED COMPONENTS core)
include_directories(SYSTEM ${DART_INCLUDE_DIRS})

find_package(OMPL REQUIRED)
include_directories(SYSTEM ${OMPL_INCLUDE_DIRS})

find_package(TinyXML2 REQUIRED)
include_directories(SYSTEM ${TinyXML2_INCLUDE_DIRS})

#==============================================================================
# Register an Aikido library.
#
set_property(GLOBAL PROPERTY AIKIDO_LIBRARIES)
set_property(GLOBAL PROPERTY AIKIDO_SOURCES)

function(aikido_add_library target_name)
  add_library("${target_name}" SHARED ${ARGN})
  set_property(GLOBAL APPEND PROPERTY AIKIDO_LIBRARIES "${target_name}")

  install(TARGETS "${target_name}"
    EXPORT "${PROJECT_NAME}Targets"
    LIBRARY DESTINATION "${LIBRARY_INSTALL_DIR}"
  )

  # Compile a list of all source files to pass to coveralls. This function may
  # be called from a subdirctory, so we first convert to absolute paths.
  set(sources)
  foreach(relative_source ${ARGN})
    get_filename_component(absolute_source
      "${CMAKE_CURRENT_SOURCE_DIR}/${relative_source}" ABSOLUTE)
    list(APPEND sources "${absolute_source}")
  endforeach()

  set_property(GLOBAL APPEND PROPERTY AIKIDO_SOURCES ${sources})
endfunction()

#==============================================================================
# Register an Aikido test.
#
set_property(GLOBAL PROPERTY AIKIDO_TESTS)

function(aikido_add_test target_name)
  add_executable("${target_name}" ${ARGN})
  add_test("${target_name}" "${target_name}")

  target_link_libraries("${target_name}" gtest gtest_main)

  set_property(GLOBAL APPEND PROPERTY AIKIDO_TESTS "${target_name}")
endfunction()

#==============================================================================
# Building libraries and unit tests.
#
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

include_directories(
  "include"
  "src"
)

add_subdirectory("src")

enable_testing()
add_subdirectory("tests" EXCLUDE_FROM_ALL)

# Targets to mimic a Catkin package. "tests" builds tests and "test" (or
# "run_tests") runs them.
get_property(all_tests GLOBAL PROPERTY AIKIDO_TESTS)
add_custom_target(tests DEPENDS ${all_tests})
add_custom_target(run_tests COMMAND "${CMAKE_CTEST_COMMAND}")

#==============================================================================
# Coveralls.
#
if(COVERALLS)
  get_property(all_sources GLOBAL PROPERTY AIKIDO_SOURCES)
  coveralls_setup("${all_sources}"
    ${COVERALLS_UPLOAD}
    "${PROJECT_SOURCE_DIR}/cmake")
endif()

#==============================================================================
# Installation.
#
install(DIRECTORY "include/"
  DESTINATION "${INCLUDE_INSTALL_DIR}"
)

# Install the package.xml file (to satisfy REP-136).
install(FILES "package.xml"
  DESTINATION "share/${PROJECT_NAME}"
)

# Generate and install a Targets.cmake file that contains EXPORTED targets, to
# be included() in the Config.cmake file. The target set "aikidoTargets" is
# generated by the install(TARGETS) directive above.
install(EXPORT "${PROJECT_NAME}Targets"
  FILE "${PROJECT_NAME}Targets.cmake"
  DESTINATION "${CONFIG_INSTALL_DIR}"
)

# Generate and install a Config.cmake file.
include(CMakePackageConfigHelpers)
configure_package_config_file("cmake/${PROJECT_NAME}Config.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
  INSTALL_DESTINATION "${CONFIG_INSTALL_DIR}"
  PATH_VARS INCLUDE_INSTALL_DIR
)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
  DESTINATION "${CONFIG_INSTALL_DIR}"
)

# TODO: We should also generate and install a _VERSION file.
