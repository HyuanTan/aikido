cmake_minimum_required(VERSION 2.8.11)

# Use MACOSX_RPATH by default on OS X. This was added in CMake 2.8.12 and
# became default in CMake 3.0. Explicitly setting this policy is necessary to
# suppress a warning in CMake 3.0 and above.
if(POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif()

project(aikido)

list(INSERT CMAKE_MODULE_PATH 0 "${PROJECT_SOURCE_DIR}/cmake") 
list(APPEND CMAKE_CXX_FLAGS "-std=c++11")

set(INCLUDE_INSTALL_DIR include)
set(LIBRARY_INSTALL_DIR lib)
set(CONFIG_INSTALL_DIR "${LIBRARY_INSTALL_DIR}/${PROJECT_NAME}/cmake")

find_package(Boost REQUIRED COMPONENTS filesystem)
find_package(DART REQUIRED COMPONENTS core)
find_package(OMPL REQUIRED)
find_package(TinyXML2 REQUIRED)

# Compilation setup
include_directories(
  "include"
  "src"
)
include_directories(SYSTEM
  ${Boost_INCLUDE_DIRS}
  ${DART_INCLUDE_DIRS}
  ${OMPL_INCLUDE_DIRS}
  ${TinyXML2_INCLUDE_DIRS}
)

# Build a list of all libraries and tests.
set_property(GLOBAL PROPERTY AIKIDO_LIBRARIES)

function(aikido_add_library target_name)
  add_library("${target_name}" SHARED ${ARGN})

  install(TARGETS "${target_name}"
    EXPORT "${PROJECT_NAME}Targets"
    LIBRARY DESTINATION "${LIBRARY_INSTALL_DIR}"
  )

  set_property(GLOBAL APPEND PROPERTY AIKIDO_LIBRARIES "${target_name}")
endfunction()

add_subdirectory("src/util")
add_subdirectory("src/path")
add_subdirectory("src/statespace")
add_subdirectory("src/constraint") # Dependencies: statespace, util
add_subdirectory("src/ompl")       # Dependencies: constraint, statespace

# Install targets, headers, and a package.xml file (to satisfy REP-136).
install(FILES "package.xml"
  DESTINATION "share/${PROJECT_NAME}"
)
install(DIRECTORY "include/"
  DESTINATION "${INCLUDE_INSTALL_DIR}"
)

# Generate and install a Targets.cmake file that contains EXPORTED targets, to
# be included() in the Config.cmake file. The target set "aikidoTargets" is
# generated by the install(TARGETS) directive above.
get_property(AIKIDO_LIBRARIES GLOBAL PROPERTY AIKIDO_LIBRARIES)
install(EXPORT "${PROJECT_NAME}Targets"
  FILE "${PROJECT_NAME}Targets.cmake"
  DESTINATION "${CONFIG_INSTALL_DIR}"
)

# Generate and install a Config.cmake file.
# TODO: We should also generate a _VERSION file.
include(CMakePackageConfigHelpers)
configure_package_config_file("cmake/${PROJECT_NAME}Config.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
  INSTALL_DESTINATION "${CONFIG_INSTALL_DIR}"
  PATH_VARS INCLUDE_INSTALL_DIR
)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
  DESTINATION "${CONFIG_INSTALL_DIR}"
)

## Add unit tests using GTest.
#enable_testing()
#add_subdirectory(tests)
