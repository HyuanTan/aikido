set(aikido_VERSION x.y.z)

@PACKAGE_INIT@

macro(aikido_traverse_components output_variable)
  foreach(component ${ARGN})
    if(NOT DEFINED "aikido_${component}_FOUND")
      set(component_include
        "${CMAKE_CURRENT_LIST_DIR}/aikido_${component}Component.cmake")
      set(target_include
        "${CMAKE_CURRENT_LIST_DIR}/aikido_${component}Targets.cmake")

      if(EXISTS "${component_include}" AND EXISTS "${target_include}")
        include("${component_include}")

        set("aikido_${component}_FOUND" TRUE)

        aikido_traverse_components("${output_variable}" 
          ${aikido_${component}_DEPENDENCIES})

        include("${target_include}")

        # this is not necessary in recent versions of cmake, which supports
        # transitive includes via INTERFACE_INCLUDE_DIRECTORIES.
        foreach(dependency ${aikido_${component}_DEPENDENCIES})
          list(APPEND "aikido_${component}_INCLUDE_DIRS"
            ${aikido_${dependency}_INCLUDE_DIRS})
          list(APPEND "aikido_${component}_DEFINITIONS"
            ${aikido_${dependency}_DEFINITIONS})
          # LIBRARIES is automatically inherited in INTERFACE_LINK_LIBRARIES.
        endforeach()

        list(APPEND "${output_variable}" "${component}")
      else()
        set("aikido_${component}_FOUND" FALSE)
      endif()
    endif()
  endforeach()
endmacro()

function(aikido_export_variable variable)
  set("${variable}" ${${variable}} CACHE INTERNAL "")
endfunction()

function(aikido_export_notfound variable)
  set("${variable}" "${variable}-NOTFOUND" CACHE INTERNAL "")
endfunction()

function(aikido_package_init)
  aikido_traverse_components(required_components "${ARGN}")

  set(aikido_INCLUDE_DIRS)
  set(aikido_DEFINITIONS)
  set(aikido_LIBRARIES)

  foreach(component ${ARGN})
    aikido_export_variable("aikido_${component}_FOUND")

    if(${aikido_${component}_FOUND})
      aikido_export_variable("aikido_${component}_INCLUDE_DIRS")
      aikido_export_variable("aikido_${component}_DEFINITIONS")
      aikido_export_variable("aikido_${component}_LIBRARIES")

      list(APPEND aikido_INCLUDE_DIRS ${aikido_${component}_INCLUDE_DIRS})
      list(APPEND aikido_DEFINITIONS ${aikido_${component}_DEFINITIONS})
      list(APPEND aikido_LIBRARIES ${aikido_${component}_LIBRARIES})
    else()
      aikido_export_notfound("aikido_${component}_INCLUDE_DIRS")
      aikido_export_notfound("aikido_${component}_DEFINITIONS")
      aikido_export_notfound("aikido_${component}_LIBRARIES")
    endif()
  endforeach()

  aikido_export_variable(aikido_INCLUDE_DIRS)
  aikido_export_variable(aikido_DEFINITIONS)
  aikido_export_variable(aikido_LIBRARIES)
endfunction()

#==============================================================================
# TODO: Append this to aikido_<C>_INCLUDE_DIRS above.
#set_and_check(aikido_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
#set(aikido_INCLUDE_DIRS "${aikido_INCLUDE_DIR}" @PACKAGE_INCLUDE_DIRS@)

if(aikido_FIND_COMPONENTS)
  aikido_package_init(${aikido_FIND_COMPONENTS})
else()
  message(WARNING
    "Aikido uses CMake components, but you called find_package(aikido) without"
    " the COMPONENTS keyword. No libraries will be added to aikido_LIBRARIES.")
endif()

# Use find_package_handle_standard_args to generate output. This handles the
# REQUIRED keyword, sets aikido_FOUND, and generates the appropriate STATUS and
# FATAL_ERROR messages. We intentionally do not check aikido_LIBRARIES here
# because it may be empty if the user did not specify any COMPONENTS.
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(aikido
  FOUND_VAR aikido_FOUND
  HANDLE_COMPONENTS
)
