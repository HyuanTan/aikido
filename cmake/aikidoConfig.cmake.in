set(aikido_VERSION x.y.z)

@PACKAGE_INIT@

# This is an auto-generated file that creates IMPORTed targets with the correct
# properties (e.g. IMPORTED_LOCATION) set.
include("${CMAKE_CURRENT_LIST_DIR}/aikidoTargets.cmake")

set_and_check(aikido_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
set(aikido_INCLUDE_DIRS "${aikido_INCLUDE_DIR}" @AIKIDO_INCLUDE_DIRS@)

# Load all known components. The _FOUND variables are checked for required
# components by the find_package_handle_standard_args function below. This
# logic requires that all of Aikido's be prefixed by "aikido_".
set(all_targets @AIKIDO_LIBRARIES@)

foreach(target_name ${all_targets})
  set("${target_name}_FOUND" TRUE)
  set("${target_name}_LIBRARY" "${target_name}")
endforeach()

# Add libraries for the specified COMPONENTS to aikido_LIBRARIES and mark them
# as _FOUND. Errors are handled by find_package_handle_standard_args below.
set(aikido_LIBRARIES)

if(aikido_FIND_COMPONENTS)
  foreach(component_name ${aikido_FIND_COMPONENTS})
    set(target_name "aikido_${component_name}")
    if(TARGET "${target_name}")
      list(APPEND aikido_LIBRARIES "${target_name}")
    endif()
  endforeach()
else()
  message(WARNING
    "Aikido uses CMake components, but you called find_package(aikido) without"
    " the COMPONENTS keyword. No libraries will be added to aikido_LIBRARIES.")
endif()

# Clean up after ourselves.
unset(all_targets)
unset(component_name)
unset(target_name)

# Use find_package_handle_standard_args to generate output. This handles the
# REQUIRED keyword, sets aikido_FOUND, and generates the appropriate STATUS and
# FATAL_ERROR messages. We intentionally do not check aikido_LIBRARIES here
# because it may be empty if the user did not specify any COMPONENTS.
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(aikido
  FOUND_VAR aikido_FOUND
  REQUIRED_VARS aikido_INCLUDE_DIR aikido_INCLUDE_DIRS
  HANDLE_COMPONENTS)
